import { NextResponse } from "next/server"
import { Document, Paragraph, TextRun, Packer } from "docx"
import { GoogleGenerativeAI } from "@google/generative-ai"

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash", apiVersion: "v1" })

export async function POST(request) {
  console.log("API route handler started")

  try {
    const contentType = request.headers.get("content-type")
    console.log("Content-Type:", contentType)

    if (!contentType?.includes("multipart/form-data")) {
      console.log("Invalid content type")
      return NextResponse.json({ error: "Content-Type must be multipart/form-data" }, { status: 400 })
    }

    console.log("Parsing form data...")
    const formData = await request.formData()
    const file = formData.get("file")
    const returnFormat = formData.get("returnFormat") || "docx"

    if (!file) {
      console.log("No file provided")
      return NextResponse.json({ error: "No file provided" }, { status: 400 })
    }

    console.log("File received:", file.name, "Type:", file.type)

    if (file.type !== "application/pdf") {
      console.log("Invalid file type:", file.type)
      return NextResponse.json({ error: "Only PDF files are allowed" }, { status: 400 })
    }

    console.log("Converting file to base64...")
    const arrayBuffer = await file.arrayBuffer()
    const base64Data = Buffer.from(arrayBuffer).toString("base64")
    console.log("File converted to base64, length:", base64Data.length)

    console.log("Preparing Gemini AI prompt...")
    const prompt = {
      contents: [
        {
          parts: [
            {
              inlineData: {
                mimeType: "application/pdf",
                data: base64Data,
              },
            },
            {
              text: "Summarize this document in 200-300 words.",
            },
          ],
        },
      ],
    }

    console.log("Sending request to Gemini AI...")
    const result = await model.generateContent(prompt)
    const response = await result.response
    const summary = response.text()
    console.log("Summary received from Gemini AI")

    // If returnFormat is json, return both summary and docx
    if (returnFormat === "json") {
      console.log("Creating DOCX document...")
      const doc = new Document({
        sections: [
          {
            children: [
              new Paragraph({
                children: [new TextRun({ text: "Document Summary", bold: true, size: 28 })],
              }),
              new Paragraph({
                children: [new TextRun({ text: "Generated by Gemini AI", italics: true })],
              }),
              new Paragraph({ children: [new TextRun("")] }),
              new Paragraph({
                children: [new TextRun(summary)],
              }),
            ],
          },
        ],
      })

      console.log("Generating DOCX buffer...")
      const docBuffer = await Packer.toBuffer(doc)
      const docBase64 = Buffer.from(docBuffer).toString("base64")

      return NextResponse.json({
        summary,
        docBase64,
      })
    } else {
      // Original behavior - return docx for download
      console.log("Creating DOCX document...")
      const doc = new Document({
        sections: [
          {
            children: [
              new Paragraph({
                children: [new TextRun({ text: "Document Summary", bold: true, size: 28 })],
              }),
              new Paragraph({
                children: [new TextRun({ text: "Generated by Gemini AI", italics: true })],
              }),
              new Paragraph({ children: [new TextRun("")] }),
              new Paragraph({
                children: [new TextRun(summary)],
              }),
            ],
          },
        ],
      })

      console.log("Generating DOCX buffer...")
      const docBuffer = await Packer.toBuffer(doc)
      console.log("DOCX buffer created, size:", docBuffer.length)

      console.log("Sending response to client...")
      return new NextResponse(docBuffer, {
        headers: {
          "Content-Type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          "Content-Disposition": 'attachment; filename="summary.docx"',
        },
      })
    }
  } catch (error) {
    console.error("Processing error:", error)
    return NextResponse.json(
      {
        error: "Processing failed",
        details: error.message,
        ...(process.env.NODE_ENV === "development" && { stack: error.stack }),
      },
      { status: 500 },
    )
  }
}
